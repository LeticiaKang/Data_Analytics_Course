1. YOLO(You Only Look Once)
    a. 가장 빠른 객체 검출 알고리즘 중 하나
    b. 256 * 256 사이즈 이미지를 사용
    c. 파이썬, 텐서플로 기반 프레임워크가 아닌 c++로 구현된 코드를 기준으로 하면 GPU사용시, 초당 170프레임
    d. 단점은 작은 물체를 탐지하는 데 어려움이 있다.(낮은 버전에서 버전이 올라갈수록 해결됨)

2. YOLO 아키텍쳐
    a. 자체 아키텍쳐 사용
    b. 아키텍쳐가 Backbone model기반이며 Feature Extractor이라고도 불림
    c. scale이 3개로 나눠짐
    d. 어떤 특징 추출기 아키텍쳐를 사용했는지에 따라 성능이 달라짐
    e. 마지막 계측 크기가 w * h * D인 특징 볼륨을 출력(그리드크기, D:특징 볼륨의 깊이)

3. 계층 출력
    a. 마지막 계층 출력은 w * h * M행렬
        1) M=B×(C+5)
            B : 그리드 셀당 경계 상자 개수
            C : 클래스 개수
    b. 클래스 개수에 5를 더한 이유는 해당 값 만큼의 숫자를 예측해야함
        > tx, ty 는 경계상자의 중심 좌표를 계산
        > tw, th 는 경계상자의 너비와 높이를 계산
        > c 는 객체가 경계 상자 안에 있다고 확신하는 신뢰도(확률)
        > p1,p2,...,pC 는 경계상자가 클래스 1, 2, ..., C의 객체를 포함할 확률
    c. Objectness Score: 바운딩 박스에 객체가 포함되어 있을 확률

4. 앵커 박스(Anchor Box)
    a. YOLOv2에서 도입
    b. 사전 정의된 상자(prior box)
    c. 객체에 가장 근접한 앵커 박스를 맞추고 신경망을 사용해 앵커 박스의 크기를 조정하는 과정때문에 tx,ty,tw,th 이 필요

5. 원리
    Grid on input -> 1) Bounding boxes + confidence 2) Class probability map -> Final detections

6.





